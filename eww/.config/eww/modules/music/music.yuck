(defvar open_music false)

(deflisten mpris :initial "{}"
"scripts/mpris.sh")


(deflisten mpris_positions :initial "{}"
"scripts/positions.sh")

(defwidget music_image []
  (overlay
    (box :orientation "h" :space-evenly false :class "music-image" :style "background-image: url('${mpris.artUrl}'); background-size: cover;" :height BOX :width BOX)
    (revealer :transition "crossfade" :reveal {open_music && (mpris == "{}" ? false : mpris.name == "" ? false : true)}
      (box :orientation "v" :hexpand true :class "times" :vexpand true :valign "center" :height BOX :width BOX
        (label :hexpand true :text {mpris_positions[mpris.name]?.positionStr})
        (label :hexpand true :text {mpris.lengthStr})
      )
    )
  )
)

(defwidget music_info []
  (revealer :transition "slideleft" :reveal {open_music && (mpris == "{}" ? false : mpris.name == "" ? false : true)}
    (box :orientation "h" :class "music" :space-evenly false
      
      (box :orientation "h" :space-evenly false :class "music-info group"  :spacing 4
        (box :orientation "v" :space-evenly false
          (label :halign "start" :class "music-title"  :text {mpris.title} :halign "end")
          (label :halign "start" :class "music-artist"  :text {mpris.artist} :halign "end")
        )
        
        
      )
      
    )
  )
)



(defwidget music []
  (revealer :transition "slideup" :reveal {mpris == "{}" ? false : mpris.name == "" ? false : true}
    (eventbox
      :class "music-button"
      :onhover "eww update open_music=true"
      :onhoverlost "eww update open_music=false"
      (box :space-evenly "false" :halign "end"
        (music_info)
        (music_image)
      )
    )
  )
)

